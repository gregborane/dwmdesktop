#!/usr/bin/python3

import gi, subprocess
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GLib, Gdk

def run(cmd):
    return subprocess.run(cmd, shell=True, text=True, capture_output=True).stdout.strip()

def set_brightness(v):
    subprocess.run(f"xrandr --output eDP-1 --brightness {float(v)/100}", shell=True)

def get_brightness():
    out = run("xrandr --verbose | grep -i brightness | head -n1")
    try:
        return int(float(out.split()[1]) * 100)
    except Exception:
        return 50

def get_default_sink():
    return run("pactl get-default-sink")

def get_volume(sink):
    out = run(f"pactl get-sink-volume {sink} 2>/dev/null | head -n1")
    parts = out.split()
    try:
        return int(parts[4].strip('%'))
    except Exception:
        return 50

def set_volume(sink, v):
    subprocess.run(["pactl", "set-sink-volume", sink, f"{int(v)}%"])

def get_default_source():
    return run("pactl get-default-source")

def get_mic(source):
    out = run(f"pactl get-source-volume {source} 2>/dev/null | head -n1")
    parts = out.split()
    try:
        return int(parts[4].strip('%'))
    except Exception:
        return 50

def set_mic(source, v):
    subprocess.run(["pactl", "set-source-volume", source, f"{int(v)}%"])

def get_battery_info():
    raw = run("upower -i /org/freedesktop/UPower/devices/battery_BAT0 | egrep 'percentage:|state:|time to empty:|time to full:'")
    lines = []
    for line in raw.splitlines():
        if ":" in line:
            key, val = line.split(":", 1)
            lines.append(f"{key.strip():<15}: {val.strip()}")
    return "\n".join(lines)


class PopupWindow(Gtk.Window):
    def __init__(self):
        super().__init__(title="Controls")
        self.set_border_width(8)
        self.set_default_size(320, 220)
        self.set_decorated(False)
        self.set_resizable(False)
        self.set_keep_above(True)
        self.set_type_hint(Gdk.WindowTypeHint.POPUP_MENU)
        self.set_skip_taskbar_hint(True)
        self.set_focus_on_map(True)

        self._update_id = None

        self.connect("key-press-event", self.on_key_press)
        self.connect("realize", self._on_realize)
        self.connect("show", self._on_show)
        self.connect("hide", self._on_hide)

        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=8)
        self.add(box)

        # Brightness
        box.pack_start(Gtk.Label(label="Brightness"), False, False, 0)
        b = Gtk.Scale.new_with_range(Gtk.Orientation.HORIZONTAL, 0, 100, 1)
        b.set_value(get_brightness())
        b.connect("value-changed", lambda s: set_brightness(s.get_value()))
        box.pack_start(b, False, False, 0)

        # Output volume
        sink = get_default_sink()
        box.pack_start(Gtk.Label(label=f"Output Volume "), False, False, 0)
        vol = Gtk.Scale.new_with_range(Gtk.Orientation.HORIZONTAL, 0, 150, 1)
        vol.set_value(get_volume(sink))
        vol.connect("value-changed", lambda s: set_volume(sink, s.get_value()))
        box.pack_start(vol, False, False, 0)

        # Microphone
        src = get_default_source()
        box.pack_start(Gtk.Label(label=f"Microphone "), False, False, 0)
        mic = Gtk.Scale.new_with_range(Gtk.Orientation.HORIZONTAL, 0, 150, 1)
        mic.set_value(get_mic(src))
        mic.connect("value-changed", lambda s: set_mic(src, s.get_value()))
        box.pack_start(mic, False, False, 0)

        # Battery
        box.pack_start(Gtk.Label(label="Battery Info"), False, False, 0)

        info = get_battery_info()
        info = info.replace(" ", "\u00A0")  # preserve spacing
        info = GLib.markup_escape_text(info)

        self.bat_label = Gtk.Label()
        self.bat_label.set_use_markup(True)
        self.bat_label.set_selectable(False)
        self.bat_label.set_line_wrap(False)
        self.bat_label.set_xalign(0)
        self.bat_label.set_markup(f"<span font='monospace'>{info}</span>")

        box.pack_start(self.bat_label, False, False, 0)


    def _on_realize(self, *args):
        gdkwin = self.get_window()
        if gdkwin:
            try:
                gdkwin.set_override_redirect(True)
            except Exception:
                pass

    def on_key_press(self, widget, event):
        self.hide()

    def _on_show(self, *args):
        self._update_id = GLib.timeout_add_seconds(5, self._refresh_battery)
        self._grab_pointer_keyboard()

    def _on_hide(self, *args):
        if self._update_id:
            GLib.source_remove(self._update_id)
            self._update_id = None
        display = Gdk.Display.get_default()
        seat = display.get_default_seat()
        seat.ungrab()

    def _refresh_battery(self):
        info = get_battery_info()
        info = info.replace(" ", "\u00A0")
        info = GLib.markup_escape_text(info)
        self.bat_label.set_markup(f"<span font='monospace'>{info}</span>")
        return True


    def popup_at_pointer(self):
        self.show_all()
        self.grab_focus()
        GLib.idle_add(self._position_near_pointer)

    def _position_near_pointer(self):
        device = Gdk.Display.get_default().get_default_seat().get_pointer()
        _, x, y = device.get_position()
        display = Gdk.Display.get_default()
        pointer = display.get_pointer()[1:3]

        monitor = display.get_monitor_at_point(*pointer)
        geo = monitor.get_geometry()
        win_width, win_height = self.get_size()

        px = max(geo.x, min(pointer[0], geo.x + geo.width - win_width))
        py = max(geo.y, min(pointer[1] + 16, geo.y + geo.height - win_height))

        self.move(px, py)
        return False

    def _grab_pointer_keyboard(self):
        display = Gdk.Display.get_default()
        seat = display.get_default_seat()
        gdkwin = self.get_window()
        if gdkwin:
            seat.grab(
                gdkwin,
                Gdk.SeatCapabilities.POINTER | Gdk.SeatCapabilities.KEYBOARD,
                True,
                None,
                None,
                None,
        )  

    def do_button_press_event(self, event):
        self.hide()
        return True

    def do_key_press_event(self, event):
        self.hide()
        return True

def main():
    popup = PopupWindow()

    tray_icon = Gtk.StatusIcon()
    tray_icon.set_from_icon_name("utilities-system-monitor")
    tray_icon.set_tooltip_text("Controls")
    tray_icon.connect("activate", lambda icon: popup.popup_at_pointer())

    Gtk.main()

if __name__ == "__main__":
    main()


